async function loadModules(generalImports,rscList,runnerPath){try{const modrunnerText=await getResource(runnerPath,false);if(modrunnerText.length===0){throw new Error("Invalid module runner script!")}
const rscArr=[];rscList.forEach(element=>rscArr.push([element.externalName,element.location]));const rscCollection=new Map(rscArr);blobsImport(rscCollection).then(modImportStatements=>{if(typeof window==='undefined'){}
else{const script=document.createElement("script");script.type="module";script.textContent=generalImports+modImportStatements+modrunnerText+"//# sourceURL="+runnerPath;document.body.appendChild(script);}});}catch(err){console.log(err)}}
function getResource(location,toblob=true){if(whichBrowser()!=="firefox"&&!(/^[^/:]*:/.test(location))){return ajaxData(location,toblob);}else{return fetchData(location,toblob);}}
function fetchData(location,toblob){return fetch(location).then(response=>{if(!response.ok){Promise.reject(new Error(`HTTP error! status: ${response.status}`));}else{if(toblob===false)return response.text()
else return response.blob()}});}
function ajaxData(location,toblob=true){console.log("ajaxData is called");return new Promise((resolve,reject)=>{const request=new XMLHttpRequest();const reader=new FileReader();request.overrideMimeType("text/javascript");reader.onload=()=>{resolve(toblob?new Blob([reader.result],{type:"application/x-javascript"}):reader.result)};request.open("GET",location);request.responseType="blob";request.onload=()=>{reader[toblob?"readAsArrayBuffer":"readAsText"](request.response)};request.send();});}
function blobsImport(rscCollection){const importedNames=Array.from(rscCollection.keys());const reConformedName=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/;if(importedNames.some(name=>!reConformedName.test(name)))
{return Promise.reject(new SyntaxError(`Illegal external name`))}
const arr=(rscCollection.size>0)?Array.from(rscCollection.values()).map(location=>getResource(location)):[];return new Promise((resolve,reject)=>{Promise.all(arr).then(blobs=>{let modImportStatements="";let index=0;blobs.forEach(blob=>{let modURL=URL.createObjectURL(blob);if(!modURL!==!importedNames[index]){reject(new ReferenceError("Unresolved module - either missing modURL or missing externalName!"));}else{modImportStatements+=`import * as ${importedNames[index]} from "${modURL}";`}
index+=1;});resolve(modImportStatements);},err=>reject(new InternalError("An error in retrieving module:"+err)));});}
function whichBrowser(){return(function(agent){switch(true){case agent.indexOf("edge")>-1:return"edge";case agent.indexOf("edg")>-1:return"chromium based edge (dev or canary)";case agent.indexOf("opr")>-1&&!!window.opr:return"opera";case agent.indexOf("chrome")>-1&&!!window.chrome:return"chrome";case agent.indexOf("trident")>-1:return"ie";case agent.indexOf("firefox")>-1:return"firefox";case agent.indexOf("safari")>-1:return"safari";default:return"other";}})(window.navigator.userAgent.toLowerCase());}